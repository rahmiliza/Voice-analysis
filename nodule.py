{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1iAueHI9wHF96Ugas-UyZVT5_ODDPEHeg","timestamp":1682568780504}],"gpuType":"T4","mount_file_id":"1FH9UoLxeMf3YEcgA1B7cP-8TQt7SovAh","authorship_tag":"ABX9TyOGklsENKviwDdYsWl5/h/a"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"5llAFDU8NBb0","executionInfo":{"status":"ok","timestamp":1698601811186,"user_tz":-480,"elapsed":478,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"outputs":[],"source":["import os\n","import numpy as np\n","import pandas as pd\n","import numpy as np\n","\n","## visualization\n","import plotly.express as px\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","# plt.style.use(\"ggplot\")\n","from IPython.display import Markdown\n","\n","## enable category\n","from sklearn.preprocessing import LabelEncoder\n","##from keras.utils.np_utils import to_categorical\n","\n","\n","from sklearn import metrics\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score\n","\n","from sklearn.metrics import roc_curve, auc\n","from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import precision_recall_fscore_support\n","\n","from sklearn.model_selection import cross_validate\n","from sklearn.model_selection import train_test_split\n","# from sklearn.model_selection import cross_val_predict\n","\n","\n","#RF\n","from sklearn.ensemble import RandomForestClassifier\n","\n","# from xgboost import XGBClassifier\n","import xgboost as xgb\n","\n","##ANN\n","from keras.models import Sequential\n","from keras.layers import Dense, Activation"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CoEVG129PJXd","executionInfo":{"status":"ok","timestamp":1698601824428,"user_tz":-480,"elapsed":9827,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"268c0230-0923-4918-a0bb-eab97ee47d71"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["\n","data_df = pd.read_csv('/content/drive/MyDrive/MOST/research/test2.csv')\n","data_df = data_df.apply(LabelEncoder().fit_transform)"],"metadata":{"id":"8ynGKJPRPk41","executionInfo":{"status":"ok","timestamp":1698601827420,"user_tz":-480,"elapsed":668,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["data_df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"id":"xNQOh9cjQCsC","executionInfo":{"status":"ok","timestamp":1698601832498,"user_tz":-480,"elapsed":315,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"0d89a177-cf80-4d77-91cf-a9e9dc2c78ff"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           voice     Fo(Hz)        Fhi    Flo(Hz)  Jitter(%)  Jitter(Abs)  \\\n","count  56.000000  56.000000  56.000000  56.000000  56.000000    56.000000   \n","mean   27.500000  27.500000  27.500000  27.500000  27.500000    27.500000   \n","std    16.309506  16.309506  16.309506  16.309506  16.309506    16.309506   \n","min     0.000000   0.000000   0.000000   0.000000   0.000000     0.000000   \n","25%    13.750000  13.750000  13.750000  13.750000  13.750000    13.750000   \n","50%    27.500000  27.500000  27.500000  27.500000  27.500000    27.500000   \n","75%    41.250000  41.250000  41.250000  41.250000  41.250000    41.250000   \n","max    55.000000  55.000000  55.000000  55.000000  55.000000    55.000000   \n","\n","             RAP        PPQ        DDP    Shimmer  ...       APQ3       APQ5  \\\n","count  56.000000  56.000000  56.000000  56.000000  ...  56.000000  56.000000   \n","mean   27.500000  27.500000  27.500000  27.500000  ...  27.500000  27.500000   \n","std    16.309506  16.309506  16.309506  16.309506  ...  16.309506  16.309506   \n","min     0.000000   0.000000   0.000000   0.000000  ...   0.000000   0.000000   \n","25%    13.750000  13.750000  13.750000  13.750000  ...  13.750000  13.750000   \n","50%    27.500000  27.500000  27.500000  27.500000  ...  27.500000  27.500000   \n","75%    41.250000  41.250000  41.250000  41.250000  ...  41.250000  41.250000   \n","max    55.000000  55.000000  55.000000  55.000000  ...  55.000000  55.000000   \n","\n","             APQ        DDA        HNR     Status       RPDE        DFA  \\\n","count  56.000000  56.000000  56.000000  56.000000  56.000000  56.000000   \n","mean   27.500000  27.500000  27.500000   0.500000  27.500000  27.500000   \n","std    16.309506  16.309506  16.309506   0.504525  16.309506  16.309506   \n","min     0.000000   0.000000   0.000000   0.000000   0.000000   0.000000   \n","25%    13.750000  13.750000  13.750000   0.000000  13.750000  13.750000   \n","50%    27.500000  27.500000  27.500000   0.500000  27.500000  27.500000   \n","75%    41.250000  41.250000  41.250000   1.000000  41.250000  41.250000   \n","max    55.000000  55.000000  55.000000   1.000000  55.000000  55.000000   \n","\n","         Spread1    Spread2  \n","count  56.000000  56.000000  \n","mean   27.500000  27.500000  \n","std    16.309506  16.309506  \n","min     0.000000   0.000000  \n","25%    13.750000  13.750000  \n","50%    27.500000  27.500000  \n","75%    41.250000  41.250000  \n","max    55.000000  55.000000  \n","\n","[8 rows x 21 columns]"],"text/html":["\n","  <div id=\"df-60b9b41c-8143-4cec-af51-e8e0322cfdef\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>voice</th>\n","      <th>Fo(Hz)</th>\n","      <th>Fhi</th>\n","      <th>Flo(Hz)</th>\n","      <th>Jitter(%)</th>\n","      <th>Jitter(Abs)</th>\n","      <th>RAP</th>\n","      <th>PPQ</th>\n","      <th>DDP</th>\n","      <th>Shimmer</th>\n","      <th>...</th>\n","      <th>APQ3</th>\n","      <th>APQ5</th>\n","      <th>APQ</th>\n","      <th>DDA</th>\n","      <th>HNR</th>\n","      <th>Status</th>\n","      <th>RPDE</th>\n","      <th>DFA</th>\n","      <th>Spread1</th>\n","      <th>Spread2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>...</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","      <td>56.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>...</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>0.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>...</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>0.504525</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","      <td>16.309506</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>...</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>0.000000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","      <td>13.750000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>...</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>0.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","      <td>27.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>...</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>1.000000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","      <td>41.250000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>...</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>1.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","      <td>55.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-60b9b41c-8143-4cec-af51-e8e0322cfdef')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-60b9b41c-8143-4cec-af51-e8e0322cfdef button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-60b9b41c-8143-4cec-af51-e8e0322cfdef');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-18de4f5d-d382-45cf-929b-981a3ce936cc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-18de4f5d-d382-45cf-929b-981a3ce936cc')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-18de4f5d-d382-45cf-929b-981a3ce936cc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["X = data_df.loc[:, data_df.columns != 'Status']\n","y = data_df['Status']\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)"],"metadata":{"id":"1z1xSJPxQJHS","executionInfo":{"status":"ok","timestamp":1698601836148,"user_tz":-480,"elapsed":327,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def cross_validation(model, _X, _y, _cv=5):\n","    _scoring = ['accuracy', 'precision', 'recall', 'f1']\n","    results = cross_validate(estimator=model,\n","                               X=_X,\n","                               y=_y,\n","                               cv=_cv,\n","                               scoring=_scoring,\n","                               return_train_score=True)\n","    return {\"Training Accuracy scores\": results['train_accuracy'],\n","              \"Mean Training Accuracy\": results['train_accuracy'].mean()*100,\n","              \"Training Precision scores\": results['train_precision'],\n","              \"Mean Training Precision\": results['train_precision'].mean(),\n","              \"Training Recall scores\": results['train_recall'],\n","              \"Mean Training Recall\": results['train_recall'].mean(),\n","              \"Training F1 scores\": results['train_f1'],\n","              \"Mean Training F1 Score\": results['train_f1'].mean(),\n","              \"Validation Accuracy scores\": results['test_accuracy'],\n","              \"Mean Validation Accuracy\": results['test_accuracy'].mean()*100,\n","              \"Validation Precision scores\": results['test_precision'],\n","              \"Mean Validation Precision\": results['test_precision'].mean(),\n","              \"Validation Recall scores\": results['test_recall'],\n","              \"Mean Validation Recall\": results['test_recall'].mean(),\n","              \"Validation F1 scores\": results['test_f1'],\n","              \"Mean Validation F1 Score\": results['test_f1'].mean()\n","              }"],"metadata":{"id":"3cTb3RN-QVI3","executionInfo":{"status":"ok","timestamp":1698601838634,"user_tz":-480,"elapsed":333,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["def plot_result(x_label, y_label, plot_title, train_data, val_data):\n","\n","  # Set size of plot\n","        plt.figure(figsize=(12,6))\n","        labels = [\"1st Fold\", \"2nd Fold\", \"3rd Fold\", \"4th Fold\", \"5th Fold\"]\n","        X_axis = np.arange(len(labels))\n","        ax = plt.gca()\n","        plt.ylim(0.40000, 1)\n","        plt.bar(X_axis-0.2, train_data, 0.4, color='violet', label='Training')\n","        plt.bar(X_axis+0.2, val_data, 0.4, color='dodgerblue', label='Validation')\n","        plt.title(plot_title, fontsize=30)\n","        plt.xticks(X_axis, labels)\n","        plt.xlabel(x_label, fontsize=14)\n","        plt.ylabel(y_label, fontsize=14)\n","        plt.legend()\n","        plt.grid(True)\n","        plt.savefig(\"{}_{}.png\".format(x_label,y_label), dpi=800)\n","        plt.show()"],"metadata":{"id":"V2dc7sArQj7o","executionInfo":{"status":"ok","timestamp":1698601843163,"user_tz":-480,"elapsed":311,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["xgb_model = xgb.XGBClassifier()\n","xgb_result = cross_validation(xgb_model, X, y, 5)"],"metadata":{"id":"dPaRqxc0Qt7-","executionInfo":{"status":"ok","timestamp":1698601847447,"user_tz":-480,"elapsed":306,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["from typing import Tuple\n","import copy as cp\n","from typing import Tuple\n","from sklearn.model_selection import KFold, cross_val_score\n","\n","def cross_val_predict(model, kfold : KFold, X : np.array, y : np.array) -> Tuple[np.array, np.array, np.array]:\n","\n","    model_ = cp.deepcopy(model)\n","\n","    no_classes = len(np.unique(y))\n","\n","    actual_classes = np.empty([0], dtype=int)\n","    predicted_classes = np.empty([0], dtype=int)\n","    predicted_proba = np.empty([0, no_classes])\n","\n","    for train_ndx, test_ndx in kfold.split(X):\n","\n","        train_X, train_y, test_X, test_y = X[train_ndx], y[train_ndx], X[test_ndx], y[test_ndx]\n","\n","        actual_classes = np.append(actual_classes, test_y)\n","\n","        model_.fit(train_X, train_y)\n","        predicted_classes = np.append(predicted_classes, model_.predict(test_X))\n","\n","        try:\n","            predicted_proba = np.append(predicted_proba, model_.predict_proba(test_X), axis=0)\n","        except:\n","            predicted_proba = np.append(predicted_proba, np.zeros((len(test_X), no_classes), dtype=float), axis=0)\n","\n","    return actual_classes, predicted_classes, predicted_proba"],"metadata":{"id":"cjwt9FAxQ1SL","executionInfo":{"status":"ok","timestamp":1698601849610,"user_tz":-480,"elapsed":310,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def plot_confusion_matrix(actual_classes : np.array, predicted_classes : np.array, sorted_labels : list):\n","\n","    matrix = confusion_matrix(actual_classes, predicted_classes, labels=sorted_labels)\n","\n","    group_counts = [\"{0:0.0f}\".format(value) for value in matrix.flatten()]\n","\n","    group_percentages = [\"{0:.2f}\".format(value) for value in (matrix/np.sum(matrix)).flatten()]\n","\n","    labels = [f\"{v1}\\n{v2}\\n\" for v1, v2 in zip(group_counts, group_percentages)]\n","\n","    labels = np.asarray(labels).reshape(2,2)\n","\n","    plt.figure(figsize=(12.8,6))\n","    sns.heatmap(matrix, annot=labels, xticklabels=sorted_labels, yticklabels=sorted_labels, cmap=\"Blues\", fmt=\"\")\n","\n","#     sns.heatmap(matrix, annot=labels, fmt='', cmap='Blues')\n","\n","    plt.xlabel('Predicted'); plt.ylabel('Actual'); plt.title('Nodule disease Confusion Matrix ')\n","    plt.savefig('XGBoost_confusion_matrix_new.png', dpi=1000, bbox_inches = 'tight')\n","    plt.show()"],"metadata":{"id":"vZnHxsjPQ3wg","executionInfo":{"status":"ok","timestamp":1698601853089,"user_tz":-480,"elapsed":292,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["kfold = KFold(n_splits=5, random_state=5, shuffle=True)\n","actual_classes, predicted_classes,_ = cross_val_predict(xgb_model, kfold, X.to_numpy(), y.to_numpy())\n","wrf_dict = {1:'Disease', 0:'Health'}\n","act_classes = [wrf_dict[letter] for letter in actual_classes]\n","pred_classes = [wrf_dict[letter] for letter in predicted_classes]\n","plot_confusion_matrix(act_classes, pred_classes, ['Disease','Health'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"rfnCI7pPRIFa","executionInfo":{"status":"ok","timestamp":1698602039680,"user_tz":-480,"elapsed":5860,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"b100d588-2acc-4f8e-a229-5a2e9aa91b69"},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1280x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["xgb_result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8gfbJMviRipJ","executionInfo":{"status":"ok","timestamp":1684911622918,"user_tz":-480,"elapsed":243,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"240da2f5-d20a-48ef-f995-877df44a5b81"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Training Accuracy scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Training Accuracy': 100.0,\n"," 'Training Precision scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Training Precision': 1.0,\n"," 'Training Recall scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Training Recall': 1.0,\n"," 'Training F1 scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Training F1 Score': 1.0,\n"," 'Validation Accuracy scores': array([0.96296296, 1.        , 1.        , 0.96296296, 1.        ]),\n"," 'Mean Validation Accuracy': 98.51851851851852,\n"," 'Validation Precision scores': array([0.95833333, 1.        , 1.        , 1.        , 1.        ]),\n"," 'Mean Validation Precision': 0.9916666666666668,\n"," 'Validation Recall scores': array([1.        , 1.        , 1.        , 0.95454545, 1.        ]),\n"," 'Mean Validation Recall': 0.990909090909091,\n"," 'Validation F1 scores': array([0.9787234 , 1.        , 1.        , 0.97674419, 1.        ]),\n"," 'Mean Validation F1 Score': 0.9910935180603662}"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["xgb_recall = xgb_result['Validation Recall scores']\n","xgb_recall\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5E-jzysRRnow","executionInfo":{"status":"ok","timestamp":1684911628493,"user_tz":-480,"elapsed":426,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"6044d912-174e-4b52-e8fc-8c7902ebecf0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1.        , 1.        , 1.        , 0.95454545, 1.        ])"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["plot_result('XGB',\n","            \"Recall\",\n","            \"Recall scores in 5 Folds\",\n","            xgb_result[\"Training Recall scores\"],\n","            xgb_result[\"Validation Recall scores\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":589},"id":"Pu6sb1bzRsMI","executionInfo":{"status":"ok","timestamp":1684911637487,"user_tz":-480,"elapsed":3487,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"e9ca7874-3e32-48b6-c969-af6c90bbe0bb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# from sklearn.model_selection import cross_val_predict\n","xgb_model.fit(X_train, y_train)\n","\n","expected_y  = y_test\n","predicted_y = xgb_model.predict(X_test)\n","print(metrics.classification_report(expected_y, predicted_y))\n","\n","# predicted_y = predicted_y.tolist()\n","xgb_df = pd.DataFrame({'y_Actual':y_test, 'y_Predicted':predicted_y})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PpTb3scFRx60","executionInfo":{"status":"ok","timestamp":1684911646290,"user_tz":-480,"elapsed":347,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"1d714b39-97af-4a58-ebfc-e7a27b2ba4a0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00         3\n","           1       1.00      1.00      1.00        31\n","\n","    accuracy                           1.00        34\n","   macro avg       1.00      1.00      1.00        34\n","weighted avg       1.00      1.00      1.00        34\n","\n"]}]},{"cell_type":"code","source":["print(accuracy_score(y_test, predicted_y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oE8govYaVU-5","executionInfo":{"status":"ok","timestamp":1682491945758,"user_tz":-480,"elapsed":303,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"1d4e98c9-d3c0-4631-d719-c55b2518cf89"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0\n"]}]},{"cell_type":"code","source":["def draw_confusionx(df, method='XGB'):\n","    confusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])\n","    group_counts = [\"{0:0.0f}\".format(value) for value in confusion_matrix.to_numpy().flatten()]\n","    group_percentages = [\"{0:.2f}\".format(value) for value in (confusion_matrix/np.sum(confusion_matrix)).to_numpy().flatten()]\n","    labels = [f\"{v1}\\n{v2}\\n\" for v1, v2 in zip(group_counts, group_percentages)]\n","    labels = np.asarray(labels).reshape(4,4)\n","    ax = sns.heatmap(confusion_matrix, annot=labels, fmt='', cmap='Blues')\n","    ax.set_xlabel('Predicted label')\n","    ax.set_ylabel('True label')\n","#     plt.title('the Confusion Maxtrix of the {}'.format(config['method']))\n","    plt.savefig('{}_confusion_matrix.pdf'.format(method), bbox_inches = 'tight')\n","    return plt"],"metadata":{"id":"0-OwuL9vSae4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def roc_auc_mean_std(df):\n","    y_test = df['y_Actual'].tolist()\n","    y_pred = df['y_Predicted'].tolist()\n","\n","    fpr = dict()\n","    tpr = dict()\n","    roc_auc = dict()\n","\n","    aucs = []\n","    tprs = []\n","    fprs = []\n","\n","    for i in range(2):\n","#         fpr[i], tpr[i], _ = roc_curve(y_test[:,i], y_pred[:,i])\n","        fpr[i], tpr[i], _ = roc_curve(y_test, y_pred)\n","        roc_auc[i] = auc(fpr[i], tpr[i])\n","        tprs.append(tpr[i])\n","        fprs.append(fpr[i])\n","        aucs.append(roc_auc[i])\n","\n","    mean_tpr = np.mean(tprs, axis=0)\n","    mean_tpr[-1] = 1.0\n","    mean_fpr = np.mean(fprs, axis=0)\n","    mean_fpr[-1] = 1.0\n","    mean_auc = auc(mean_fpr, mean_tpr)\n","    std_auc = np.std(aucs)\n","\n","    return mean_fpr, mean_tpr, mean_auc, std_auc\n"],"metadata":{"id":"rJlaKh8kSv0E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":166},"id":"0QApRuZiVH63","executionInfo":{"status":"error","timestamp":1682491901211,"user_tz":-480,"elapsed":371,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"ab560641-bd41-4dbf-a6f7-725b8dcfc610"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-ee03000a9c23>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'y_pred' is not defined"]}]},{"cell_type":"code","source":["label_xgb_df = xgb_df.replace([0,1], ['No-WRF','WRF'])"],"metadata":{"id":"YDM3osFTS1TL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["xgb_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"4shqx1QsS3yM","executionInfo":{"status":"ok","timestamp":1682491279149,"user_tz":-480,"elapsed":308,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"1b296b08-85fc-4186-8a33-2e330e72baae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     y_Actual  y_Predicted\n","127         0            0\n","66          1            1\n","104         1            1\n","19          1            1\n","42          1            1\n","60          1            1\n","12          1            1\n","109         1            1\n","100         1            1\n","101         1            1\n","44          1            1\n","40          1            1\n","27          1            1\n","47          1            1\n","73          1            1\n","31          1            1\n","83          1            1\n","4           1            1\n","64          1            1\n","97          1            1\n","84          1            1\n","26          1            1\n","16          1            1\n","18          1            1\n","10          1            1\n","110         1            1\n","45          1            1\n","11          1            1\n","51          1            1\n","93          1            1\n","122         0            0\n","125         0            0\n","36          1            1\n","0           1            1"],"text/html":["\n","  <div id=\"df-9a747ea6-db30-4043-a068-8accbb6b99d2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y_Actual</th>\n","      <th>y_Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>127</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>104</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>109</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>100</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>101</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>73</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>83</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>84</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>110</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>93</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>122</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>125</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a747ea6-db30-4043-a068-8accbb6b99d2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9a747ea6-db30-4043-a068-8accbb6b99d2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9a747ea6-db30-4043-a068-8accbb6b99d2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["print(\"XGB Accuracy:\",metrics.accuracy_score(xgb_df['y_Actual'].tolist(), xgb_df['y_Predicted'].tolist()))\n","acc_xgb = metrics.accuracy_score(xgb_df['y_Actual'].tolist(), xgb_df['y_Predicted'].tolist())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uedy2FDfTAH9","executionInfo":{"status":"ok","timestamp":1682491327068,"user_tz":-480,"elapsed":316,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"03f1e108-17da-463a-92e7-ff77295ac9f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["XGB Accuracy: 1.0\n"]}]},{"cell_type":"code","source":["acc_df = pd.DataFrame({'method':'XGB',\n","                       'Acc':[acc_xgb]})"],"metadata":{"id":"eUrfuwaNTZTZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig = px.bar(acc_df, x='method', y='Acc')\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"0YoqyvOvTtjo","executionInfo":{"status":"ok","timestamp":1682491566045,"user_tz":-480,"elapsed":1841,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"5424311e-1031-4e15-cb55-abc979ca9c0e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.18.2.min.js\"></script>                <div id=\"964a9454-c537-42ef-8d4a-e1d389cca134\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"964a9454-c537-42ef-8d4a-e1d389cca134\")) {                    Plotly.newPlot(                        \"964a9454-c537-42ef-8d4a-e1d389cca134\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"method=%{x}<br>Acc=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[\"XGB\"],\"xaxis\":\"x\",\"y\":[1.0],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"method\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Acc\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('964a9454-c537-42ef-8d4a-e1d389cca134');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["# roc_xgb_df, roc_randf_df, roc_svm_df, roc_ann_df\n","df = label_xgb_df\n","confusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])\n","\n","group_counts = [\"{0:0.0f}\".format(value) for value in confusion_matrix.to_numpy().flatten()]\n","\n","group_percentages = [\"{0:.2f}\".format(value) for value in (confusion_matrix/np.sum(confusion_matrix)).to_numpy().flatten()]\n","\n","labels = [f\"{v1}\\n{v2}\\n\" for v1, v2 in zip(group_counts, group_percentages)]\n","\n","labels = np.asarray(labels).reshape(2,2)\n","\n","# labels = np.asarray(labels).reshape(2,2)\n","\n","ax = sns.heatmap(confusion_matrix, annot=labels, fmt='', cmap='Blues')\n","\n","ax.set_xlabel('Predicted label')\n","ax.set_ylabel('True label')\n","plt.savefig('XGBoost_confusion_matrix.png', dpi=1000, bbox_inches = 'tight')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"hRZD4xcOUFDi","executionInfo":{"status":"ok","timestamp":1682491598785,"user_tz":-480,"elapsed":2626,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"a1703f4a-1b23-4873-b82c-0308f8f86fac"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}