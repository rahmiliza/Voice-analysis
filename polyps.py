{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1FH9UoLxeMf3YEcgA1B7cP-8TQt7SovAh","timestamp":1682569822301},{"file_id":"1iAueHI9wHF96Ugas-UyZVT5_ODDPEHeg","timestamp":1682568780504}],"mount_file_id":"1wS00Ir0hWNdycMLJekwaT-AZOR0m3YfP","authorship_tag":"ABX9TyP0uEyoqHZMkMAHh4bSP0k9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"5llAFDU8NBb0","executionInfo":{"status":"ok","timestamp":1687846108448,"user_tz":-480,"elapsed":8013,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"outputs":[],"source":["import os\n","import numpy as np\n","import pandas as pd\n","import numpy as np\n","\n","## visualization\n","import plotly.express as px\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","# plt.style.use(\"ggplot\")\n","from IPython.display import Markdown\n","\n","## enable category\n","from sklearn.preprocessing import LabelEncoder\n","from keras.utils.np_utils import to_categorical\n","\n","\n","from sklearn import metrics\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score\n","\n","from sklearn.metrics import roc_curve, auc\n","from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import precision_recall_fscore_support\n","\n","from sklearn.model_selection import cross_validate\n","from sklearn.model_selection import train_test_split\n","# from sklearn.model_selection import cross_val_predict\n","\n","\n","#RF\n","from sklearn.ensemble import RandomForestClassifier\n","\n","# from xgboost import XGBClassifier\n","import xgboost as xgb\n","\n","##ANN\n","from keras.models import Sequential\n","from keras.layers import Dense, Activation"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CoEVG129PJXd","executionInfo":{"status":"ok","timestamp":1687846127884,"user_tz":-480,"elapsed":10458,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"95ff9df5-c410-4ee5-f027-e5e6ac06dc76"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["\n","data_df = pd.read_csv('/content/drive/MyDrive/MOST/research/training/trainpolypss.csv')\n","data_df = data_df.apply(LabelEncoder().fit_transform)"],"metadata":{"id":"8ynGKJPRPk41","executionInfo":{"status":"ok","timestamp":1687846131135,"user_tz":-480,"elapsed":1104,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["data_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"_Eu0_0mkpwNY","executionInfo":{"status":"ok","timestamp":1687846133689,"user_tz":-480,"elapsed":457,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"31b4ef3c-2609-4304-a84b-78660f7aa075"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   voice  duration  Fhi  Flo  meanF0Hz  stdevF0Hz  HNR  localJitter  \\\n","0     28        23   94   36        80        129   25          122   \n","1     27        59   85   61        28         36   94           44   \n","2     29        23    7   29        12         15   35           90   \n","3    130        37   96   21        92         87   91           40   \n","4    131        37   82   74        75         76  119           38   \n","\n","   localShimmer  localdbShimmer  status  \n","0           124             117       1  \n","1            39              36       1  \n","2            73              79       1  \n","3            35              34       1  \n","4            34              35       1  "],"text/html":["\n","  <div id=\"df-7e3f9e16-a8cb-4525-876a-6327225bab55\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>voice</th>\n","      <th>duration</th>\n","      <th>Fhi</th>\n","      <th>Flo</th>\n","      <th>meanF0Hz</th>\n","      <th>stdevF0Hz</th>\n","      <th>HNR</th>\n","      <th>localJitter</th>\n","      <th>localShimmer</th>\n","      <th>localdbShimmer</th>\n","      <th>status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>28</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>36</td>\n","      <td>80</td>\n","      <td>129</td>\n","      <td>25</td>\n","      <td>122</td>\n","      <td>124</td>\n","      <td>117</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>27</td>\n","      <td>59</td>\n","      <td>85</td>\n","      <td>61</td>\n","      <td>28</td>\n","      <td>36</td>\n","      <td>94</td>\n","      <td>44</td>\n","      <td>39</td>\n","      <td>36</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>29</td>\n","      <td>23</td>\n","      <td>7</td>\n","      <td>29</td>\n","      <td>12</td>\n","      <td>15</td>\n","      <td>35</td>\n","      <td>90</td>\n","      <td>73</td>\n","      <td>79</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>130</td>\n","      <td>37</td>\n","      <td>96</td>\n","      <td>21</td>\n","      <td>92</td>\n","      <td>87</td>\n","      <td>91</td>\n","      <td>40</td>\n","      <td>35</td>\n","      <td>34</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>131</td>\n","      <td>37</td>\n","      <td>82</td>\n","      <td>74</td>\n","      <td>75</td>\n","      <td>76</td>\n","      <td>119</td>\n","      <td>38</td>\n","      <td>34</td>\n","      <td>35</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e3f9e16-a8cb-4525-876a-6327225bab55')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7e3f9e16-a8cb-4525-876a-6327225bab55 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7e3f9e16-a8cb-4525-876a-6327225bab55');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["data_df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"xNQOh9cjQCsC","executionInfo":{"status":"ok","timestamp":1687846137122,"user_tz":-480,"elapsed":307,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"1de3868e-04a0-429a-d0ab-a8571d258179"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            voice    duration         Fhi         Flo    meanF0Hz   stdevF0Hz  \\\n","count  134.000000  134.000000  134.000000  134.000000  134.000000  134.000000   \n","mean    66.500000   35.932836   66.500000   66.500000   66.500000   66.500000   \n","std     38.826537   22.377552   38.826537   38.826537   38.826537   38.826537   \n","min      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n","25%     33.250000   16.250000   33.250000   33.250000   33.250000   33.250000   \n","50%     66.500000   35.000000   66.500000   66.500000   66.500000   66.500000   \n","75%     99.750000   54.750000   99.750000   99.750000   99.750000   99.750000   \n","max    133.000000   77.000000  133.000000  133.000000  133.000000  133.000000   \n","\n","              HNR  localJitter  localShimmer  localdbShimmer      status  \n","count  134.000000   134.000000    134.000000      134.000000  134.000000  \n","mean    66.500000    66.500000     66.500000       66.500000    0.835821  \n","std     38.826537    38.826537     38.826537       38.826537    0.371828  \n","min      0.000000     0.000000      0.000000        0.000000    0.000000  \n","25%     33.250000    33.250000     33.250000       33.250000    1.000000  \n","50%     66.500000    66.500000     66.500000       66.500000    1.000000  \n","75%     99.750000    99.750000     99.750000       99.750000    1.000000  \n","max    133.000000   133.000000    133.000000      133.000000    1.000000  "],"text/html":["\n","  <div id=\"df-02d0d81b-bc5e-4c34-b098-805091a54109\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>voice</th>\n","      <th>duration</th>\n","      <th>Fhi</th>\n","      <th>Flo</th>\n","      <th>meanF0Hz</th>\n","      <th>stdevF0Hz</th>\n","      <th>HNR</th>\n","      <th>localJitter</th>\n","      <th>localShimmer</th>\n","      <th>localdbShimmer</th>\n","      <th>status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","      <td>134.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>66.500000</td>\n","      <td>35.932836</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>0.835821</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>38.826537</td>\n","      <td>22.377552</td>\n","      <td>38.826537</td>\n","      <td>38.826537</td>\n","      <td>38.826537</td>\n","      <td>38.826537</td>\n","      <td>38.826537</td>\n","      <td>38.826537</td>\n","      <td>38.826537</td>\n","      <td>38.826537</td>\n","      <td>0.371828</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>33.250000</td>\n","      <td>16.250000</td>\n","      <td>33.250000</td>\n","      <td>33.250000</td>\n","      <td>33.250000</td>\n","      <td>33.250000</td>\n","      <td>33.250000</td>\n","      <td>33.250000</td>\n","      <td>33.250000</td>\n","      <td>33.250000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>66.500000</td>\n","      <td>35.000000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>66.500000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>99.750000</td>\n","      <td>54.750000</td>\n","      <td>99.750000</td>\n","      <td>99.750000</td>\n","      <td>99.750000</td>\n","      <td>99.750000</td>\n","      <td>99.750000</td>\n","      <td>99.750000</td>\n","      <td>99.750000</td>\n","      <td>99.750000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>133.000000</td>\n","      <td>77.000000</td>\n","      <td>133.000000</td>\n","      <td>133.000000</td>\n","      <td>133.000000</td>\n","      <td>133.000000</td>\n","      <td>133.000000</td>\n","      <td>133.000000</td>\n","      <td>133.000000</td>\n","      <td>133.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02d0d81b-bc5e-4c34-b098-805091a54109')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-02d0d81b-bc5e-4c34-b098-805091a54109 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-02d0d81b-bc5e-4c34-b098-805091a54109');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["X = data_df.loc[:, data_df.columns != 'status']\n","y = data_df['status']\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.32, random_state=15)"],"metadata":{"id":"1z1xSJPxQJHS","executionInfo":{"status":"ok","timestamp":1687846139789,"user_tz":-480,"elapsed":302,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["def cross_validation(model, _X, _y, _cv=5):\n","    _scoring = ['accuracy', 'precision', 'recall', 'f1']\n","    results = cross_validate(estimator=model,\n","                               X=_X,\n","                               y=_y,\n","                               cv=_cv,\n","                               scoring=_scoring,\n","                               return_train_score=True)\n","    return {\"Training Accuracy scores\": results['train_accuracy'],\n","              \"Mean Training Accuracy\": results['train_accuracy'].mean()*100,\n","              \"Training Precision scores\": results['train_precision'],\n","              \"Mean Training Precision\": results['train_precision'].mean(),\n","              \"Training Recall scores\": results['train_recall'],\n","              \"Mean Training Recall\": results['train_recall'].mean(),\n","              \"Training F1 scores\": results['train_f1'],\n","              \"Mean Training F1 Score\": results['train_f1'].mean(),\n","              \"Validation Accuracy scores\": results['test_accuracy'],\n","              \"Mean Validation Accuracy\": results['test_accuracy'].mean()*100,\n","              \"Validation Precision scores\": results['test_precision'],\n","              \"Mean Validation Precision\": results['test_precision'].mean(),\n","              \"Validation Recall scores\": results['test_recall'],\n","              \"Mean Validation Recall\": results['test_recall'].mean(),\n","              \"Validation F1 scores\": results['test_f1'],\n","              \"Mean Validation F1 Score\": results['test_f1'].mean()\n","              }"],"metadata":{"id":"3cTb3RN-QVI3","executionInfo":{"status":"ok","timestamp":1687846141718,"user_tz":-480,"elapsed":273,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["def plot_result(x_label, y_label, plot_title, train_data, val_data):\n","\n","  # Set size of plot\n","        plt.figure(figsize=(12,6))\n","        labels = [\"1st Fold\", \"2nd Fold\", \"3rd Fold\", \"4th Fold\", \"5th Fold\"]\n","        X_axis = np.arange(len(labels))\n","        ax = plt.gca()\n","        plt.ylim(0.40000, 1)\n","        plt.bar(X_axis-0.2, train_data, 0.4, color='violet', label='Training')\n","        plt.bar(X_axis+0.2, val_data, 0.4, color='dodgerblue', label='Validation')\n","        plt.title(plot_title, fontsize=30)\n","        plt.xticks(X_axis, labels)\n","        plt.xlabel(x_label, fontsize=14)\n","        plt.ylabel(y_label, fontsize=14)\n","        plt.legend()\n","        plt.grid(True)\n","        plt.savefig(\"{}_{}.png\".format(x_label,y_label), dpi=800)\n","        plt.show()"],"metadata":{"id":"V2dc7sArQj7o","executionInfo":{"status":"ok","timestamp":1687846144569,"user_tz":-480,"elapsed":6,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["xgb_model = xgb.XGBClassifier()\n","xgb_result = cross_validation(xgb_model, X, y, 5)"],"metadata":{"id":"dPaRqxc0Qt7-","executionInfo":{"status":"ok","timestamp":1687846147375,"user_tz":-480,"elapsed":771,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["from typing import Tuple\n","import copy as cp\n","from typing import Tuple\n","from sklearn.model_selection import KFold, cross_val_score\n","\n","def cross_val_predict(model, kfold : KFold, X : np.array, y : np.array) -> Tuple[np.array, np.array, np.array]:\n","\n","    model_ = cp.deepcopy(model)\n","\n","    no_classes = len(np.unique(y))\n","\n","    actual_classes = np.empty([0], dtype=int)\n","    predicted_classes = np.empty([0], dtype=int)\n","    predicted_proba = np.empty([0, no_classes])\n","\n","    for train_ndx, test_ndx in kfold.split(X):\n","\n","        train_X, train_y, test_X, test_y = X[train_ndx], y[train_ndx], X[test_ndx], y[test_ndx]\n","\n","        actual_classes = np.append(actual_classes, test_y)\n","\n","        model_.fit(train_X, train_y)\n","        predicted_classes = np.append(predicted_classes, model_.predict(test_X))\n","\n","        try:\n","            predicted_proba = np.append(predicted_proba, model_.predict_proba(test_X), axis=0)\n","        except:\n","            predicted_proba = np.append(predicted_proba, np.zeros((len(test_X), no_classes), dtype=float), axis=0)\n","\n","    return actual_classes, predicted_classes, predicted_proba"],"metadata":{"id":"cjwt9FAxQ1SL","executionInfo":{"status":"ok","timestamp":1687846148416,"user_tz":-480,"elapsed":3,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def plot_confusion_matrix(actual_classes : np.array, predicted_classes : np.array, sorted_labels : list):\n","\n","    matrix = confusion_matrix(actual_classes, predicted_classes, labels=sorted_labels)\n","\n","    group_counts = [\"{0:0.0f}\".format(value) for value in matrix.flatten()]\n","\n","    group_percentages = [\"{0:.2f}\".format(value) for value in (matrix/np.sum(matrix)).flatten()]\n","\n","    labels = [f\"{v1}\\n{v2}\\n\" for v1, v2 in zip(group_counts, group_percentages)]\n","\n","    labels = np.asarray(labels).reshape(2,2)\n","\n","    plt.figure(figsize=(12.8,6))\n","    sns.heatmap(matrix, annot=labels, xticklabels=sorted_labels, yticklabels=sorted_labels, cmap=\"Blues\", fmt=\"\")\n","\n","#     sns.heatmap(matrix, annot=labels, fmt='', cmap='Blues')\n","\n","    plt.xlabel('Predicted'); plt.ylabel('Actual'); plt.title('Polyp Disease Confusion Matrix')\n","    plt.savefig('XGBoost_confusion_matrix_new.png', dpi=1000, bbox_inches = 'tight')\n","    plt.show()"],"metadata":{"id":"vZnHxsjPQ3wg","executionInfo":{"status":"ok","timestamp":1687846151632,"user_tz":-480,"elapsed":2,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["kfold = KFold(n_splits=5, random_state=42, shuffle=True)\n","actual_classes, predicted_classes,_ = cross_val_predict(xgb_model, kfold, X.to_numpy(), y.to_numpy())\n","wrf_dict = {1:'Disease', 0:'Health'}\n","act_classes = [wrf_dict[letter] for letter in actual_classes]\n","pred_classes = [wrf_dict[letter] for letter in predicted_classes]\n","plot_confusion_matrix(act_classes, pred_classes, ['Disease','Health'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"rfnCI7pPRIFa","executionInfo":{"status":"ok","timestamp":1687846366123,"user_tz":-480,"elapsed":10843,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"95c90846-08d2-4009-f95b-c4fdaeecec47"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1280x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["xgb_result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8gfbJMviRipJ","executionInfo":{"status":"ok","timestamp":1687846369650,"user_tz":-480,"elapsed":460,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"62e48085-f877-47ec-86d3-22b03a01e921"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Training Accuracy scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Training Accuracy': 100.0,\n"," 'Training Precision scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Training Precision': 1.0,\n"," 'Training Recall scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Training Recall': 1.0,\n"," 'Training F1 scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Training F1 Score': 1.0,\n"," 'Validation Accuracy scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Validation Accuracy': 100.0,\n"," 'Validation Precision scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Validation Precision': 1.0,\n"," 'Validation Recall scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Validation Recall': 1.0,\n"," 'Validation F1 scores': array([1., 1., 1., 1., 1.]),\n"," 'Mean Validation F1 Score': 1.0}"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["xgb_recall = xgb_result['Validation Recall scores']\n","xgb_recall\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5E-jzysRRnow","executionInfo":{"status":"ok","timestamp":1687441449433,"user_tz":-480,"elapsed":281,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"bcda422c-f5ff-4f26-f873-461aafc2b2bf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1., 1., 1., 1., 1.])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["plot_result('XGB',\n","            \"Recall\",\n","            \"Recall scores in 5 Folds\",\n","            xgb_result[\"Training Recall scores\"],\n","            xgb_result[\"Validation Recall scores\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":589},"id":"Pu6sb1bzRsMI","executionInfo":{"status":"ok","timestamp":1687441752151,"user_tz":-480,"elapsed":6865,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"29b617ad-48d8-499f-ff4a-5396b79232f7"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# from sklearn.model_selection import cross_val_predict\n","xgb_model.fit(X_train, y_train)\n","\n","expected_y  = y_test\n","predicted_y = xgb_model.predict(X_test)\n","print(metrics.classification_report(expected_y, predicted_y))\n","\n","# predicted_y = predicted_y.tolist()\n","xgb_df = pd.DataFrame({'y_Actual':y_test, 'y_Predicted':predicted_y})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PpTb3scFRx60","executionInfo":{"status":"ok","timestamp":1685032530884,"user_tz":-480,"elapsed":293,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"e1691dc7-6803-4e07-ee1d-14d41a0aecc5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        12\n","           1       1.00      1.00      1.00         6\n","\n","    accuracy                           1.00        18\n","   macro avg       1.00      1.00      1.00        18\n","weighted avg       1.00      1.00      1.00        18\n","\n"]}]},{"cell_type":"code","source":["print(accuracy_score(y_test, predicted_y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oE8govYaVU-5","executionInfo":{"status":"ok","timestamp":1685032535449,"user_tz":-480,"elapsed":296,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"44596507-5282-4610-c95b-07b103aa0918"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0\n"]}]},{"cell_type":"code","source":["def draw_confusionx(df, method='XGB'):\n","    confusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])\n","    group_counts = [\"{0:0.0f}\".format(value) for value in confusion_matrix.to_numpy().flatten()]\n","    group_percentages = [\"{0:.2f}\".format(value) for value in (confusion_matrix/np.sum(confusion_matrix)).to_numpy().flatten()]\n","    labels = [f\"{v1}\\n{v2}\\n\" for v1, v2 in zip(group_counts, group_percentages)]\n","    labels = np.asarray(labels).reshape(4,4)\n","    ax = sns.heatmap(confusion_matrix, annot=labels, fmt='', cmap='Blues')\n","    ax.set_xlabel('Predicted label')\n","    ax.set_ylabel('True label')\n","#     plt.title('the Confusion Maxtrix of the {}'.format(config['method']))\n","    plt.savefig('{}_confusion_matrix.pdf'.format(method), bbox_inches = 'tight')\n","    return plt"],"metadata":{"id":"0-OwuL9vSae4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def roc_auc_mean_std(df):\n","    y_test = df['y_Actual'].tolist()\n","    y_pred = df['y_Predicted'].tolist()\n","\n","    fpr = dict()\n","    tpr = dict()\n","    roc_auc = dict()\n","\n","    aucs = []\n","    tprs = []\n","    fprs = []\n","\n","    for i in range(2):\n","#         fpr[i], tpr[i], _ = roc_curve(y_test[:,i], y_pred[:,i])\n","        fpr[i], tpr[i], _ = roc_curve(y_test, y_pred)\n","        roc_auc[i] = auc(fpr[i], tpr[i])\n","        tprs.append(tpr[i])\n","        fprs.append(fpr[i])\n","        aucs.append(roc_auc[i])\n","\n","    mean_tpr = np.mean(tprs, axis=0)\n","    mean_tpr[-1] = 1.0\n","    mean_fpr = np.mean(fprs, axis=0)\n","    mean_fpr[-1] = 1.0\n","    mean_auc = auc(mean_fpr, mean_tpr)\n","    std_auc = np.std(aucs)\n","\n","    return mean_fpr, mean_tpr, mean_auc, std_auc\n"],"metadata":{"id":"rJlaKh8kSv0E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":166},"id":"0QApRuZiVH63","executionInfo":{"status":"error","timestamp":1682491901211,"user_tz":-480,"elapsed":371,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"ab560641-bd41-4dbf-a6f7-725b8dcfc610"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-ee03000a9c23>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'y_pred' is not defined"]}]},{"cell_type":"code","source":["label_xgb_df = xgb_df.replace([0,1], ['No-WRF','WRF'])"],"metadata":{"id":"YDM3osFTS1TL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["xgb_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":613},"id":"4shqx1QsS3yM","executionInfo":{"status":"ok","timestamp":1685032546781,"user_tz":-480,"elapsed":481,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"db42a45d-23fd-4ed0-f108-7b53b1916e1d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    y_Actual  y_Predicted\n","36         0            0\n","39         0            0\n","20         1            1\n","22         1            1\n","42         0            0\n","14         1            1\n","35         0            0\n","51         0            0\n","48         0            0\n","41         0            0\n","47         0            0\n","37         0            0\n","3          1            1\n","52         0            0\n","16         1            1\n","40         0            0\n","34         0            0\n","26         1            1"],"text/html":["\n","  <div id=\"df-eaae8b86-2122-4384-aefc-4817bc7399aa\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y_Actual</th>\n","      <th>y_Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>36</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eaae8b86-2122-4384-aefc-4817bc7399aa')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-eaae8b86-2122-4384-aefc-4817bc7399aa button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-eaae8b86-2122-4384-aefc-4817bc7399aa');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":96}]},{"cell_type":"code","source":["print(\"XGB Accuracy:\",metrics.accuracy_score(xgb_df['y_Actual'].tolist(), xgb_df['y_Predicted'].tolist()))\n","acc_xgb = metrics.accuracy_score(xgb_df['y_Actual'].tolist(), xgb_df['y_Predicted'].tolist())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uedy2FDfTAH9","executionInfo":{"status":"ok","timestamp":1685032553043,"user_tz":-480,"elapsed":734,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"28662a56-9e8f-4985-b6ac-b905d2efb06a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["XGB Accuracy: 1.0\n"]}]},{"cell_type":"code","source":["acc_df = pd.DataFrame({'method':'XGB',\n","                       'Acc':[acc_xgb]})"],"metadata":{"id":"eUrfuwaNTZTZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig = px.bar(acc_df, x='method', y='Acc')\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"0YoqyvOvTtjo","executionInfo":{"status":"ok","timestamp":1685032559066,"user_tz":-480,"elapsed":1292,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"6a1d09e8-4912-4880-c7bf-3d84a08c6734"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.18.2.min.js\"></script>                <div id=\"b7b20001-cea6-4448-9817-3030e02eb367\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"b7b20001-cea6-4448-9817-3030e02eb367\")) {                    Plotly.newPlot(                        \"b7b20001-cea6-4448-9817-3030e02eb367\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"method=%{x}<br>Acc=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[\"XGB\"],\"xaxis\":\"x\",\"y\":[1.0],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"method\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Acc\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('b7b20001-cea6-4448-9817-3030e02eb367');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["# roc_xgb_df, roc_randf_df, roc_svm_df, roc_ann_df\n","df = label_xgb_df\n","confusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])\n","\n","group_counts = [\"{0:0.0f}\".format(value) for value in confusion_matrix.to_numpy().flatten()]\n","\n","group_percentages = [\"{0:.2f}\".format(value) for value in (confusion_matrix/np.sum(confusion_matrix)).to_numpy().flatten()]\n","\n","labels = [f\"{v1}\\n{v2}\\n\" for v1, v2 in zip(group_counts, group_percentages)]\n","\n","labels = np.asarray(labels).reshape(2,2)\n","\n","# labels = np.asarray(labels).reshape(2,2)\n","\n","ax = sns.heatmap(confusion_matrix, annot=labels, fmt='', cmap='Blues')\n","\n","ax.set_xlabel('Predicted label')\n","ax.set_ylabel('True label')\n","plt.savefig('XGBoost_confusion_matrix.png', dpi=1000, bbox_inches = 'tight')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"hRZD4xcOUFDi","executionInfo":{"status":"ok","timestamp":1685032567226,"user_tz":-480,"elapsed":4063,"user":{"displayName":"Rahmi Liza","userId":"11535030403672329668"}},"outputId":"19d1fa68-956a-4d02-d883-3287d2d6f2cf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"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7dIbb7yhZs2aaeLEiXni7datm5KSkpzHqFGjDPqTAAovJiZGly5d0s6dO50VuPLlyys6OtpZhUtISFCNGjVUtWpV5+eGDx+upKQkffbZZ2revLnefPNNRUZG5ul/06ZNLj/vwcHBRXl7wB9ihhrUpk0b3XvvvRo1apR69OhR4M/deuutSkpKcr6+vnd7bGysBg4cqNTUVOe3M+laIjF37ly1adNGWVlZLhMtJcnHx8f5i7RevXo6evSo+vbtq8WLF7ucFxQUlO8vXMAKkZGRqly5suLj45WWlub8eQ8PD1eVKlW0detWxcfH5/l5L1eunCIjIxUZGal//etfioqK0q233qr69eu7nBcREaEyZcoU1e0AhUZFApKkV199VWvXrnUOPUjX/jHfsmWLy3lbtmxR7dq15evrq4CAAOcvwsjISAUGBkq6lkhcunRJU6ZMUa1atVShQgVJ1xKWHTt2aN26dc4hkN8zcuRILV++XHv27DH4bgFjxcbGKiEhwaUCJ137mV+3bp127NiR7/yI66pUqaJHH32U6hpuSiQSkCRFRUWpW7dumjZtmrNt6NChWr9+vV566SV9/fXXWrhwoWbMmKFhw4b9bl/XS7jTp093fjuTrv2yDA8P19tvv/27v1R/eX7nzp01ZswY928MKAKxsbHavHmzkpKSXH7mr1fhsrKy/vBnfuDAgVq7dq3LUlLgZkAiAacJEyYoNzfX+bpZs2ZasWKFli1bpoYNG2rMmDGaMGFCgYY/YmNjdfHixTyb8kRHR+vixYsFSiQkafDgwfr3v/+tHTt2FOZWgCIVGxurK1euKDIy0uXxzNd/3q8vE/099evX1z333EPijJsOjxEHAABuoyIBAADcRiIBAADcRiIBAADcRiIBAADcRiIBAADcRiIBAADcRiIBAADcRiIBeJAePXqoU6dOztcxMTEaNGhQkceRkJAgm82mc+fO/eY5NptNa9asKXCf48aNU5MmTW4orm+++UY2m83lGS8ArEUiAfyBHj16yGazyWazyc/PT5GRkZowYYKuXr1q+rVXrVqll156qUDnFuQffwAwGk//BArgvvvu0/z585WZmamPP/5Y/fr1U/HixfN9yFJWVpb8/PwMuW7ZsmUN6QcAzEJFAigAu92usLAwVatWTX379lW7du304YcfSvp5OGLixIkKDw9XnTp1JEnffvutunbtqjJlyqhs2bLq2LGjvvnmG2efOTk5GjJkiMqUKaOQkBC98MIL+vWO9b8e2sjMzNSIESNUpUoV2e12RUZG6t1339U333zjfH5JcHCwbDab85koubm5iouLU0REhAICAtS4cWN98MEHLtf5+OOPVbt2bQUEBCg2NtYlzoIaMWKEateurRIlSqhGjRoaPXq0srOz85w3d+5cValSRSVKlFDXrl11/vx5l/fnzZunevXqyd/fX3Xr1tWsWbMKHQuAokMiAbghICBAWVlZztfr16/XoUOH9Omnn+qjjz5Sdna27r33XgUGBmrTpk3asmWLSpUqpfvuu8/5uTfeeEMLFizQP//5T23evFlnz57V6tWrf/e6Tz31lN5//31NmzZNBw4c0Ny5c1WqVClVqVJFK1eulCQdOnRIycnJeuuttyRJcXFxWrRokebMmaMvv/xSgwcP1hNPPKENGzZIupbwdOnSRQ8++KCSkpL09NNPa+TIkYX+MwkMDNSCBQv01Vdf6a233tI777yjN9980+WcI0eOaMWKFVq7dq0++eQT7d27V88995zz/SVLlmjMmDGaOHGiDhw4oFdeeUWjR4/WwoULCx0PgCLiAPC7unfv7ujYsaPD4XA4cnNzHZ9++qnDbrc7hg0b5nw/NDTUkZmZ6fzM4sWLHXXq1HHk5uY62zIzMx0BAQGO//znPw6Hw+GoWLGiY/Lkyc73s7OzHZUrV3Zey+FwOKKjox0DBw50OBwOx6FDhxySHJ9++mm+ccbHxzskOdLS0pxtGRkZjhIlSji2bt3qcm6vXr0cjz/+uMPhcDhGjRrlqF+/vsv7I0aMyNPXr0lyrF69+jfff+211xy33HKL8/XYsWMdvr6+ju+++87Ztm7dOoePj48jOTnZ4XA4HDVr1nQsXbrUpZ+XXnrJ0bJlS4fD4XAcP37cIcmxd+/e37wugKLFHAmgAD766COVKlVK2dnZys3N1V//+leNGzfO+X5UVJTLvIh9+/bpyJEjCgwMdOknIyNDR48e1fnz55WcnKzmzZs73ytWrJhuvfXWPMMb1yUlJcnX11fR0dEFjvvIkSO6fPmy7r77bpf2rKwsNW3aVJJ04MABlzgkqWXLlgW+xnXLly/XtGnTdPToUaWnp+vq1asqXbq0yzlVq1ZVpUqVXK6Tm5urQ4cOKTAwUEePHlWvXr3Uu3dv5zlXr15VUFBQoeMBUDRIJIACiI2N1ezZs+Xn56fw8HAVK+b6V6dkyZIur9PT03XLLbdoyZIlefoqX768WzEEBAQU+jPp6emSpH//+98u/4BL1+Z9GGXbtm3q1q2bxo8fr3vvvVdBQUFatmyZ3njjjULH+s477+RJbHx9fQ2LFYCxSCSAAihZsqQiIyMLfH6zZs20fPlyVahQIc+38usqVqyoxMREtWnTRtK1b967d+9Ws2bN8j0/KipKubm52rBhg9q1a5fn/esVkZycHGdb/fr1ZbfbdfLkyd+sZNSrV885cfS67du3//FN/sLWrVtVrVo1/eMf/3C2nThxIs95J0+e1A8//KDw8HDndXx8fFSnTh2FhoYqPDxcx44dU7du3Qp1fQDWYbIlYIJu3bqpXLly6tixozZt2qTjx48rISFBAwYM0HfffSdJGjhwoF599VWtWbNGBw8e1HPPPfe7e0BUr15d3bt319/+9jetWbPG2eeKFSskSdWqVZPNZtNHH32kM2fOKD09XYGBgRo2bJgGDx6shQsX6ujRo9qzZ4+mT5/unMD47LPP6vDhwxo+fLgOHTqkpUuXasGCBYW631q1aunkyZNatmyZjh49qmnTpuU7cdTf31/du3fXvn37tGnTJg0YMEBdu3ZVWFiYJGn8+PGKi4vTtGnT9PXXX+uLL77Q/PnzNWXKlELFA6DokEgAJihRooQ2btyoqlWrqkuXLqpXr5569eqljIwMZ4Vi6NChevLJJ9W9e3e1bNlSgYGB6ty58+/2O3v2bD388MN67rnnVLduXfXu3VuXLl2SJFWqVEnjx4/XyJEjFRoaqv79+0uSXnrpJY0ePVpxcXGqV6+e7rvvPv373/9WRESEpGvzFlauXKk1a9aocePGmjNnjl555ZVC3W+HDh00ePBg9e/fX02aNNHWrVs1evToPOdFRkaqS5cuuv/++3XPPfeoUaNGLss7n376ac2bN0/z589XVFSUoqOjtWDBAmesADyPzfFbM7sAAAD+ABUJAADgNhIJAADgNhIJAADgNhIJAADgNhIJAADgNhIJAADgNhIJAADgNhIJAADgNhIJAADgNhIJAADgNhIJAADgNhIJAADgtv8HA1MvGH7oYb8AAAAASUVORK5CYII=\n"},"metadata":{}}]}]}